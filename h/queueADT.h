/*
 * queueADT.h
 *
 *  Created on: 2017. 6. 26.
 *      Author: ghbae
 */

#ifndef QUEUEADT_H_
#define QUEUEADT_H_

/*******************************************************************************
* Include
*******************************************************************************/
#include "typedefinition.h"

/*******************************************************************************
* Constant
*******************************************************************************/


/*******************************************************************************
* Define & MACRO
*******************************************************************************/
#ifndef QUEUE_SIZE
#define QUEUE_SIZE 128
#endif

/*******************************************************************************
* Node Structures
*******************************************************************************/
typedef struct edgeNode {
	int col;
	int row;
	edge dir;
}edgeNode;

/*******************************************************************************
* Type Definition
*******************************************************************************/
typedef edgeNode keyType;

/*******************************************************************************
* Exported Global Variables
*******************************************************************************/

/*******************************************************************************
* Memeber
*******************************************************************************/
typedef struct queue {
	int		front;
	int		rear;
	int		size;
	keyType Q[QUEUE_SIZE];
}queue;

/*******************************************************************************
* Memeber Functions
*******************************************************************************/
void		queueInit(queue* pq, int newSize);

bool		queueIsEmpty(queue* pq);
bool		queueIsFull(queue* pq);

bool		enQueue(queue* pq, int col, int row, edge dir);
keyType*	deQueue(queue* pq);

/*	newQueue : 새로운 queue 생성. newSize를 받아서 큐 메모리를 동적할당한다. 리턴되는 큐 포인터가 할당된 메모리의 주소. main.c에서 할당받은 driveQ가 된다.
 * 				할당받은 메모리 공간은 delete해주기 전까지 남아있다.
 *  deleteQueue : queue 소멸자. 동적할당한 메모리를 해제한다.
 *  queueInit : 큐에 구조체 edgeNode를 newSize갯수만큼 메모리 공간을 동적할당하고, edgeNode구조체의 포인터를 저장한다.
 *  queueDistroy : 동적할당된 edgeNode 메모리를 해제한다.
 *  queueIsEmpty : 큐가 비었는지 검사한다. 비었으면 TRUE리턴. 아직 비지 않았으면 FALSE리턴.
 *  queueIsFull : 큐가 꽉 찼는지 검사한다. 꽉 찼으면 TRUE리턴. 아직 비지 않았으면 FALSE리턴.
 *  enQueue : 큐에 새로운 정보를 하나 집어넣는다. 여기서는 엣지 정보를 저장하기위해 엣지의 가로,세로(행,열) 정보와 엣지각도를 저장한다.
 *  deQueue : 큐에 저장된 정보를 하나 빼낸다. edgeNode의 포인터를 리턴하므로, .이 아니라 ->로 데이터에 접근가능하다. */

#endif /* QUEUEADT_H_ */
